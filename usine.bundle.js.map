{"version":3,"sources":["webpack:///webpack/bootstrap 4a89f8bbcc21e722c9a7","webpack:///./usine.js","webpack:///external \"PIXI\""],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;;AAIA;;;AAGA;;AAEA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;;;;AAIA;AACA,0D;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,oC;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,IAAG;;;;AAIH;;AAEA;;AAEA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,EAAC,S;;;;;;AC1ID,uB","file":"usine.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 4a89f8bbcc21e722c9a7\n **/","var DIRECTION_TOP = 0,\r\n    DIRECTION_RIGHT = 1,\r\n    DIRECTION_BOTTOM = 2,\r\n    DIRECTION_LEFT = 3,\r\n\r\n    BELT_SIZE = 40;\r\n\r\nvar data = {\r\n  belts: {}\r\n};\r\n\r\nvar Belt = {\r\n  container: null,\r\n  textures: []\r\n};\r\n\r\nvar Cursor = {\r\n  container: null,\r\n  direction: DIRECTION_TOP\r\n};\r\n\r\nfunction createCursor() {\r\n  Cursor.container = new PIXI.Container();\r\n\r\n  var rect = new PIXI.Graphics();\r\n\r\n  rect.beginFill(0x0000FF, 1);\r\n  rect.drawRect(0, 0, gridCellSize, gridCellSize);\r\n  rect.endFill();\r\n\r\n  cursor.addChild(rect);\r\n\r\n}\r\n\r\nwindow.addEventListener('load', function () {\r\n\r\n  var PIXI = require('pixi.js');\r\n\r\n  // You can use either `new PIXI.WebGLRenderer`, `new PIXI.CanvasRenderer`, or `PIXI.autoDetectRenderer`\r\n  // which will try to choose the best renderer for the environment you are in.\r\n  var renderer = new PIXI.WebGLRenderer(800, 600);\r\n\r\n\r\n  Belt.textures[DIRECTION_TOP] = PIXI.Texture.fromImage('resources/belt-top.png');\r\n  Belt.textures[DIRECTION_RIGHT] = PIXI.Texture.fromImage('resources/belt-right.png');\r\n  Belt.textures[DIRECTION_BOTTOM] = PIXI.Texture.fromImage('resources/belt-bottom.png');\r\n  Belt.textures[DIRECTION_LEFT] = PIXI.Texture.fromImage('resources/belt-left.png');\r\n\r\n\r\n  // The renderer will create a canvas element for you that you can then insert into the DOM.\r\n  document.body.appendChild(renderer.view);\r\n\r\n  // You need to create a root container that will hold the scene you want to draw.\r\n  var stage = new PIXI.Container();\r\n\r\n  // This creates a texture from a 'bunny.png' image.\r\n  var bunnyTexture = PIXI.Texture.fromImage('resources/bunny.png');\r\n  var bunny = new PIXI.Sprite(bunnyTexture);\r\n\r\n  // Setup the position and scale of the bunny\r\n//  bunny.position.x = 400;\r\n//  bunny.position.y = 300;\r\n\r\n  bunny.scale.x = 0.7;\r\n  bunny.scale.y = 0.7;\r\n\r\n  // Add the bunny to the scene we are building.\r\n  stage.addChild(bunny);\r\n\r\n\r\n\r\n  var gridCellSize = 25;\r\n\r\n\r\n  var el = renderer.view;\r\n\r\n  el.addEventListener('mousemove', function (event) {\r\n    cursor.position.x = Math.floor(event.layerX / gridCellSize) * gridCellSize;\r\n    cursor.position.y = Math.floor(event.layerY / gridCellSize) * gridCellSize;\r\n  });\r\n\r\n  el.addEventListener('click', function (event) {\r\n    var x = Math.floor(event.layerX / gridCellSize);\r\n    var y = Math.floor(event.layerY / gridCellSize);\r\n    var key = x+','+y;\r\n\r\n  \r\n\r\n    if (data.belts.hasOwnProperty(key)) {\r\n      Belt.container.removeChild(data.belts[key].sprite);   \r\n      data.belts[key].sprite.destroy();\r\n      delete data.belts[key];\r\n    }\r\n\r\n    var direction = DIRECTION_TOP;\r\n    var sprite = new PIXI.Sprite(Belt.textures[direction]);\r\n\r\n    sprite.position.x = x * gridCellSize;\r\n    sprite.position.y = y * gridCellSize;\r\n\r\n    console.log(40 / gridCellSize);    \r\n\r\n    sprite.scale.x = sprite.scale.y = gridCellSize / BELT_SIZE;\r\n\r\n    data.belts[key] = {\r\n      x: x,\r\n      y: y,\r\n      direction: direction,\r\n      sprite: sprite\r\n    }\r\n\r\n    Belt.container.addChild(sprite);\r\n\r\n  });\r\n\r\n\r\n\r\n  stage.addChild(cursor);\r\n\r\n  Belt.container = new PIXI.Container();\r\n\r\n  stage.addChild(Belt.container);\r\n\r\n\r\n  // kick off the animation loop (defined below)\r\n  animate();\r\n\r\n  function animate() {\r\n      // start the timer for the next animation loop\r\n      requestAnimationFrame(animate);\r\n\r\n      // each frame we spin the bunny around a bit\r\n      //bunny.rotation += 0.01;\r\n\r\n      // this is the main render call that makes pixi draw your container and its children.\r\n      renderer.render(stage);\r\n  }\r\n\r\n}, false);\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./usine.js\n ** module id = 0\n ** module chunks = 0\n **/","module.exports = PIXI;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"PIXI\"\n ** module id = 1\n ** module chunks = 0\n **/"],"sourceRoot":""}